                                                             //BRUTE FORCE
 
 sort(nums.begin(),nums.end());
        int n= nums.size();
        int res;
        
        for(int i=0;i<n;i++){
            if(nums[i]==nums[i+1]){
             res=nums[i];
                break;
            }
        }
        
        return res;
    }
    
    
                                                            //OPTIMIZED
     
     int n= nums.size();
        int freq[n];
        
         for(int i=0;i<n;i++){
             freq[i]=0;
         }
        
        for(int i=0;i<n;i++){
            if(freq[nums[i]]==0){
              freq[nums[i]]++;
            }
            else{
                return nums[i];
            }
        }
        
        return 0;
    }
    
    
    
                                                       //LINKED LIST CYCLE APPROACH
                                                       
         int n= nums.size();
        
       int slow=nums[0];
        int fast= nums[0];
        
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
                
        }while(slow!=fast);
        
       fast=nums[0];
   while(slow!=fast){
                

         slow=nums[slow];
         fast=nums[fast];
           
        
   }
        
        return slow;
