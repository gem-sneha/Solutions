                            // OPTIMAL SOLUTION FOR BOTH LEETCODE AND GFG PROBLEM
                            
                                                      // OPTIMAL SOL FOR BOTH GFG AND LEETCODE PROBLEM

    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int row= matrix.size();
        int col= matrix[0].size();
        
        for(int i=0;i<row;i++){
            
            int low=0;
            int high= col-1;
            
            while(low<=high){
                int mid=(low+high)/2;
                
            
            if(matrix[i][mid]==target)
                return true;
            else if(matrix[i][mid]<target){
                low= mid+1;
            }
            else{
                high=mid-1;
            }
            }
        }
        
        return false;
        
    }
}
                                              // OPTIMIOZED SOLUTION FOR GFG APPROACH
                                              
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int row= matrix.size();
        int col= matrix[0].size();
    
        
        int i=0;
        int j=col-1;
        while(j>=0 && i<row){
           if(matrix[i][j]==target){
               return true;
           }
            
           else if(matrix[i][j]<target){
                i++;
            }
            else{
                j--;
            }
        }
            
           
        
        
        return false;
        
    }
};



                                          //OPTIMAL SOLUTION FOR LEETCODE
                                          
                                           bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int row= matrix.size();
        int col= matrix[0].size();
      
        int low=0;
        int high= row*col-1;
       while(low<=high){
           
           int mid= (low+high)/2;
           
           if(matrix[mid/col][mid%col]==target){
               return true;
           }
           else if(matrix[mid/col][mid%col]<target){
               low= mid+1;
           }
           else{
               high=mid-1;
           }
       }
            
           
        
        
        return false;
        
    }
