                                                     // O(N^3) complexity solution
                 
                                          
 int n = nums.size();
       long long int sum, max=INT_MIN;
        
       
       if(n==1){
           return nums[0];
       }     
        
        for(int i=0;i<n;i++){
             for(int j=i;j<n;j++){
                  sum=0;
                for(int k=i;k<=j;k++){
                    sum+=nums[k];
                    if(sum>max){
                        max=sum;
                    }
                }
            }
        }
        return max;
        
      
                                                    /// OPTIMAZTION
                                                    
    int n = nums.size();
       long long int sum, max=INT_MIN;
        
       
       if(n==1){
           return nums[0];
       }     
        for(int i=0;i<n;i++){
        sum=0;
             for(int j=i;j<n;j++){
                    sum+=nums[j];
                    if(sum>max){
                        max=sum;
                    }
                }
        }
        return max;
        
      
                                               //OPTIMAL SOLUTION
                                               
                                               
                                               
     int n = nums.size();
        int sum=0, max=nums[0];
        
       if(n==1){
           return nums[0];
       }
       
        for(int i=0;i<n;i++){
              
             sum+=nums[i];
            if(sum>max){
                max=sum;
            }
            if(sum<0){
              sum=0;
            }
                }
        return max;
                                                  
        
